27,28c27,28
<   Application:			./s13_02
<   Timestamp:			2021-03-01 16:46:10
---
>   Application:			./s13_03
>   Timestamp:			2021-03-01 16:46:24
50c50
<   Total Time:				0.04 s
---
>   Total Time:				0.05 s
52c52
<   Time spent in innermost loops:	100 %
---
>   Time spent in innermost loops:	88.89 %
54c54
<   Perfect Flow Complexity:		6.34
---
>   Perfect Flow Complexity:		3.98
57c57
<       Potential Speedup:		1.24
---
>       Potential Speedup:		1.20
60c60
<       Potential Speedup:		1.20
---
>       Potential Speedup:		1.17
63,64c63,64
<       Potential Speedup:		6.34
<       Nb Loops to get 80%:		1
---
>       Potential Speedup:		5.95
>       Nb Loops to get 80%:		2
75,76c75,76
<       Number of loops   | 1      | 
<       Cumulated Speedup | 1.2353 | 
---
>       Number of loops   | 1      | 2      | 
>       Cumulated Speedup | 1.2038 | 1.2038 | 
78c78,79
<     s13 - 02 - 5:	1.2353
---
>     s13 - 03 - 5:	1.2038
>     s13 - 03 - 6:	1.2038
81,82c82,83
<       Number of loops   | 1      | 
<       Cumulated Speedup | 1.1957 | 
---
>       Number of loops   | 1      | 2      | 
>       Cumulated Speedup | 1.1703 | 1.1703 | 
84c85,86
<     s13 - 02 - 5:	1.1957
---
>     s13 - 03 - 5:	1.1703
>     s13 - 03 - 6:	1.1703
87,88c89,90
<       Number of loops   | 1      | 
<       Cumulated Speedup | 6.3396 | 
---
>       Number of loops   | 1      | 2      | 
>       Cumulated Speedup | 3.9791 | 5.9528 | 
90c92,93
<     s13 - 02 - 5:	6.3396
---
>     s13 - 03 - 5:	3.9791
>     s13 - 03 - 6:	5.9528
134,141c137,144
<    > 8%                  | 1                     | 100                   | 100                   |
<    4% to 8%              | 0                     | 0                     | 100                   |
<    2% to 4%              | 0                     | 0                     | 100                   |
<    1% to 2%              | 0                     | 0                     | 100                   |
<    0.5% to 1%            | 0                     | 0                     | 100                   |
<    0.25% to 0.5%         | 0                     | 0                     | 100                   |
<    0.125% to 0.25%       | 0                     | 0                     | 100                   |
<    < 0.125%              | 0                     | 0                     | 100                   |
---
>    > 8%                  | 1                     | 88.89                 | 88.89                 |
>    4% to 8%              | 0                     | 0                     | 88.89                 |
>    2% to 4%              | 0                     | 0                     | 88.89                 |
>    1% to 2%              | 0                     | 0                     | 88.89                 |
>    0.5% to 1%            | 0                     | 0                     | 88.89                 |
>    0.25% to 0.5%         | 0                     | 0                     | 88.89                 |
>    0.125% to 0.25%       | 0                     | 0                     | 88.89                 |
>    < 0.125%              | 0                     | 0                     | 88.89                 |
155c158
<    s13                                          | s13_02          | 100          | 0.04       |
---
>    s13                                          | s13_03          | 100          | 0.04       |
169c172,173
<    5          | s13_02          |                                              | 100          |
---
>    5          | s13_03          |                                              | 88.89        |
>    6          | s13_03          |                                              | 11.11        |
188c192
<       5.1.1  -  Loop 5 from s13_02
---
>       5.1.1  -  Loop 5 from s13_03
512a517,588
> 
> 
> 
> 
> 
> 
> 
>       5.1.2  -  Loop 6 from s13_03
>   ========================================================================================
> 
> 
> Warnings:
> Non-innermost loop: analyzing only self part (ignoring child loops).
> This loop has 4 execution paths.
> 
> The presence of multiple execution paths is typically the main/first bottleneck.
> Try to simplify control inside loop: ideally, try to remove all conditional expressions, for example by (if applicable):
>  - hoisting them (moving them outside the loop)
>  - turning them into conditional moves, MIN or MAX
> 
> 
> 
>       5.1.2.1  -  Path 1
>   ----------------------------------------------------------------------------------------
> 
> Warnings:
> This path is accessible from 4 CFG paths (including child blocks)
> 
> 0% of peak computational performance is used (0.00 out of 4.00 FLOP per cycle (GFLOPS @ 1GHz))
> 
>       5.1.2.1.1  -  Vectorization
>   ----------------------------------------------------------------------------------------
> 
> Your loop is not vectorized.
> 4 data elements could be processed at once in vector registers.
> By vectorizing your loop, you can lower the cost of an iteration from 1.50 to 0.37 cycles (4.00x speedup).
> 
> Details
> All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).
> Since your execution units are vector units, only a vectorized loop can use their full power.
> 
> 
> Workaround
>  - Try another compiler or update/tune your current one
>  - Remove inter-iterations dependences from your loop and make it unit-stride:
>   * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly
>   * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA)
> 
> 
> 
>       5.1.2.1.2  -  Execution units bottlenecks
>   ----------------------------------------------------------------------------------------
> 
> Found no such bottlenecks but see expert reports for more complex bottlenecks.
> 
> 
> 
> No data for this section
> 
> 
> 
>       5.1.2.1.3  -  Type of elements and instruction set
>   ----------------------------------------------------------------------------------------
> 
> No instructions are processing arithmetic or math operations on FP elements. This loop is probably writing/copying data or processing integer elements.
> 
> 
>       5.1.2.1.4  -  Matching between your loop (in the source code) and the binary loop
>   ----------------------------------------------------------------------------------------
> 
> The binary loop does not contain any FP arithmetical operations.
> The binary loop does not load or store any data.
