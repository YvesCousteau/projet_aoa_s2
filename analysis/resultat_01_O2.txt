8c8
< Info: Experiment directory created: /home/hugohenrotte/Code/projet_aoa_s2/exp_OV1
---
> Info: Experiment directory created: /home/hugohenrotte/Code/projet_aoa_s2/exp_OV2
17,18c17,18
< hybrid POP metrics: block 1/5hybrid POP metrics: block 2/5hybrid POP metrics: block 3/5hybrid POP metrics: block 4/5hybrid POP metrics: block 5/5Info: ---> ANALYZE LOOP 10 (1/1)...Info
Info: ---> ANALYZE FUNCTION s13 (1/1) ...Info: ---> ALL FUNCTIONS HAVE BEEN ANALYZED                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
---
> hybrid POP metrics: block 1/4hybrid POP metrics: block 2/4hybrid POP metrics: block 3/4hybrid POP metrics: block 4/4Info: ---> ANALYZE LOOP 10 (1/1)...Info
Info: ---> ANALYZE FUNCTION s13 (1/1) ...Info
33,34c33,34
<   Application:			./s13_01
<   Timestamp:			2021-03-16 20:02:48
---
>   Application:			./s13_02
>   Timestamp:			2021-03-16 20:02:51
56c56
<   Total Time:				0.73 s
---
>   Total Time:				0.18 s
60,61c60,61
<   Perfect Flow Complexity:		7.77
<   Array Access Efficiency:		83.33 %
---
>   Perfect Flow Complexity:		6.34
>   Array Access Efficiency:		95.83 %
63c63
<       Potential Speedup:		1.51
---
>       Potential Speedup:		1.24
66c66
<       Potential Speedup:		1.55
---
>       Potential Speedup:		1.20
69c69
<       Potential Speedup:		7.77
---
>       Potential Speedup:		6.34
82c82
<       Cumulated Speedup | 1.5111 | 
---
>       Cumulated Speedup | 1.2353 | 
84c84
<     s13 - 01 - 10:	1.5111
---
>     s13 - 02 - 10:	1.2353
88c88
<       Cumulated Speedup | 1.5455 | 
---
>       Cumulated Speedup | 1.1957 | 
90c90
<     s13 - 01 - 10:	1.5455
---
>     s13 - 02 - 10:	1.1957
94c94
<       Cumulated Speedup | 7.7670 | 
---
>       Cumulated Speedup | 6.3396 | 
96c96
<     s13 - 01 - 10:	7.767
---
>     s13 - 02 - 10:	6.3396
161c161
<    s13                                          | s13_01          | 100          | 0.73       |
---
>    s13                                          | s13_02          | 100          | 0.18       |
175c175
<    10         | s13_01          |                                              | 100          |
---
>    10         | s13_02          |                                              | 100          |
194c194
<       5.1.1  -  Loop 10 from s13_01
---
>       5.1.1  -  Loop 10 from s13_02
216,217c216,217
< 8 data elements could be processed at once in vector registers.
< By vectorizing your loop, you can lower the cost of an iteration from 2.50 to 0.31 cycles (8.00x speedup).
---
> Only 18% of vector register length is used (average across all SSE/AVX instructions).
> By vectorizing your loop, you can lower the cost of an iteration from 1.25 to 0.19 cycles (6.67x speedup).
235,247c235
< Performance is limited by:
<  - reading data from caches/RAM (load units are a bottleneck)
<  - writing data to caches/RAM (the store unit is a bottleneck)
< 
< By removing all these bottlenecks, you can lower the cost of an iteration from 2.50 to 1.50 cycles (1.67x speedup).
< 
< 
< Workaround
<  - Read less array elements
<  - Write less array elements
<  - Provide more information to your compiler:
<   * hardcode the bounds of the corresponding 'for' loop
< 
---
> Found no such bottlenecks but see expert reports for more complex bottlenecks.
255,267c243
<       5.1.1.1.3  -  Complex instructions
<   ----------------------------------------------------------------------------------------
< 
< Detected COMPLEX INSTRUCTIONS.
< 
< 
< Details
< These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.
<  - ADD: 1 occurrences
< 
< 
< 
<       5.1.1.1.4  -  Type of elements and instruction set
---
>       5.1.1.1.3  -  Type of elements and instruction set
273c249
<       5.1.1.1.5  -  Matching between your loop (in the source code) and the binary loop
---
>       5.1.1.1.4  -  Matching between your loop (in the source code) and the binary loop
277,278c253
< The binary loop is loading 20 bytes.
< The binary loop is storing 4 bytes.
---
> The binary loop does not load or store any data.
292,293c267,268
< 8 data elements could be processed at once in vector registers.
< By vectorizing your loop, you can lower the cost of an iteration from 4.00 to 0.50 cycles (8.00x speedup).
---
> Only 16% of vector register length is used (average across all SSE/AVX instructions).
> By vectorizing your loop, you can lower the cost of an iteration from 1.75 to 0.25 cycles (7.00x speedup).
311,323c286
< Performance is limited by:
<  - reading data from caches/RAM (load units are a bottleneck)
<  - writing data to caches/RAM (the store unit is a bottleneck)
< 
< By removing all these bottlenecks, you can lower the cost of an iteration from 4.00 to 3.75 cycles (1.07x speedup).
< 
< 
< Workaround
<  - Read less array elements
<  - Write less array elements
<  - Provide more information to your compiler:
<   * hardcode the bounds of the corresponding 'for' loop
< 
---
> Found no such bottlenecks but see expert reports for more complex bottlenecks.
331,343c294
<       5.1.1.2.3  -  Complex instructions
<   ----------------------------------------------------------------------------------------
< 
< Detected COMPLEX INSTRUCTIONS.
< 
< 
< Details
< These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.
<  - ADD: 1 occurrences
< 
< 
< 
<       5.1.1.2.4  -  Type of elements and instruction set
---
>       5.1.1.2.3  -  Type of elements and instruction set
349c300
<       5.1.1.2.5  -  Matching between your loop (in the source code) and the binary loop
---
>       5.1.1.2.4  -  Matching between your loop (in the source code) and the binary loop
353,354c304
< The binary loop is loading 32 bytes.
< The binary loop is storing 4 bytes.
---
> The binary loop does not load or store any data.
362c312
< 0% of peak computational performance is used (0.06 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))
---
> 0% of peak computational performance is used (0.25 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))
368c318
< By removing them, you can lower the cost of an iteration from 17.25 to 9.75 cycles (1.77x speedup).
---
> By removing them, you can lower the cost of an iteration from 4.00 to 3.00 cycles (1.33x speedup).
381c331
< By vectorizing your loop, you can lower the cost of an iteration from 17.25 to 2.22 cycles (7.77x speedup).
---
> By vectorizing your loop, you can lower the cost of an iteration from 4.00 to 0.75 cycles (5.33x speedup).
415d364
<  - ADD: 1 occurrences
431c380
<  - Constant unknown stride: 2 occurrence(s)
---
>  - Constant non-unit stride: 1 occurrence(s)
467,468c416,417
< The binary loop is loading 136 bytes (34 single precision FP elements).
< The binary loop is storing 12 bytes (3 single precision FP elements).
---
> The binary loop is loading 8 bytes (2 single precision FP elements).
> The binary loop is storing 8 bytes (2 single precision FP elements).
474c423
< Arithmetic intensity is 0.01 FP operations per loaded or stored byte.
---
> Arithmetic intensity is 0.06 FP operations per loaded or stored byte.
488c437
< By removing them, you can lower the cost of an iteration from 10.25 to 6.25 cycles (1.64x speedup).
---
> By removing them, you can lower the cost of an iteration from 3.50 to 2.50 cycles (1.40x speedup).
500,501c449,450
< Only 21% of vector register length is used (average across all SSE/AVX instructions).
< By vectorizing your loop, you can lower the cost of an iteration from 10.25 to 1.35 cycles (7.62x speedup).
---
> Only 19% of vector register length is used (average across all SSE/AVX instructions).
> By vectorizing your loop, you can lower the cost of an iteration from 3.50 to 0.47 cycles (7.47x speedup).
535d483
<  - ADD: 1 occurrences
545,561c493
<       5.1.1.4.5  -  Slow data structures access
<   ----------------------------------------------------------------------------------------
< 
< Detected data structures (typically arrays) that cannot be efficiently read/written
< 
< Details
<  - Constant unknown stride: 2 occurrence(s)
< Non-unit stride (uncontiguous) accesses are not efficiently using data caches
< 
< 
< Workaround
<  - Try to reorganize arrays of structures to structures of arrays
<  - Consider to permute loops (see vectorization gain report)
< 
< 
< 
<       5.1.1.4.6  -  Conversion instructions
---
>       5.1.1.4.5  -  Conversion instructions
574c506
<       5.1.1.4.7  -  Type of elements and instruction set
---
>       5.1.1.4.6  -  Type of elements and instruction set
581c513
<       5.1.1.4.8  -  Matching between your loop (in the source code) and the binary loop
---
>       5.1.1.4.7  -  Matching between your loop (in the source code) and the binary loop
585,586c517,518
< The binary loop is loading 80 bytes (10 double precision FP elements).
< The binary loop is storing 8 bytes (1 double precision FP elements).
---
> The binary loop is loading 4 bytes (0 double precision FP elements).
> The binary loop is storing 4 bytes (0 double precision FP elements).
